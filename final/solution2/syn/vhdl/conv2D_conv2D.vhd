-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv2D_conv2D is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_r_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    input_r_ce1 : OUT STD_LOGIC;
    input_r_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    kernel_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    kernel_ce0 : OUT STD_LOGIC;
    kernel_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    kernel_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    kernel_ce1 : OUT STD_LOGIC;
    kernel_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of conv2D_conv2D is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "conv2D_conv2D,hls_ip_2018_3,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.693000,HLS_SYN_LAT=54,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=36,HLS_SYN_FF=3219,HLS_SYN_LUT=1296,HLS_VERSION=2018_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";

attribute shreg_extract : string;
    signal ap_rst_reg_2 : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_reg_2 : signal is "no";
    signal ap_rst_reg_1 : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_reg_1 : signal is "no";
    signal ap_rst_reg : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_reg : signal is "no";
    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten_reg_239 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_250 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_reg_261 : STD_LOGIC_VECTOR (1 downto 0);
    signal exitcond_flatten_fu_278_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_651 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal exitcond_flatten_reg_651_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_651_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next_fu_284_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten_next_reg_655 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal j_mid2_fu_296_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_mid2_reg_660 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_mid2_fu_304_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_mid2_reg_668 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_5_1_mid2_fu_318_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_5_1_mid2_reg_676 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_5_2_mid2_v_fu_330_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_5_2_mid2_v_reg_682 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_s_fu_350_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_reg_688 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state8_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state13_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal tmp_9_cast_fu_356_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_9_cast_reg_693 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_1_fu_370_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_1_reg_704 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_9_0_1_cast_fu_375_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_9_0_1_cast_reg_709 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernel_load_6_reg_720 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_load_7_reg_725 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_411_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_3_reg_730 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state4_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state9_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_state14_pp0_stage2_iter2 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal tmp_10_fu_439_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_10_reg_741 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_10_reg_741_pp0_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal kernel_load_reg_746 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_0_2_cast_fu_451_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_9_0_2_cast_reg_751 : STD_LOGIC_VECTOR (5 downto 0);
    signal input_load_6_reg_762 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_load_7_reg_767 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_load_8_reg_772 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_485_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_6_reg_777 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state5_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal input_load_reg_782 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_fu_499_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_12_reg_792 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernel_load_1_reg_797 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_fu_513_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_15_reg_807 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernel_load_2_reg_812 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_load_8_reg_817 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_state6_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_state11_pp0_stage4_iter1 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal input_load_1_reg_832 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_load_2_reg_837 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_load_3_reg_842 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_load_4_reg_847 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_load_3_reg_857 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal input_load_4_reg_862 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_load_5_reg_867 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_load_5_reg_872 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_518_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_2_reg_877 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_522_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_2_1_reg_882 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_530_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_reg_887 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_538_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_2_2_reg_892 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_542_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_0_1_reg_897 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_550_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_0_2_reg_902 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp6_fu_570_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp6_reg_907 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_554_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_1_reg_912 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_558_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_1_1_reg_917 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp2_fu_575_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp2_reg_922 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_562_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_1_2_reg_927 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp3_fu_579_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp3_reg_932 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp4_fu_587_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp4_reg_937 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_phi_mux_indvar_flatten_phi_fu_243_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_i_phi_fu_254_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_phi_mux_j_phi_fu_265_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_13_cast_fu_365_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal tmp_17_cast_fu_385_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_11_cast_fu_434_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal tmp_20_cast_fu_460_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_15_cast_fu_494_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal tmp_18_cast_fu_508_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_12_cast_fu_526_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal tmp_16_cast_fu_534_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_19_cast_fu_546_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_14_cast_fu_592_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_fu_290_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_fu_272_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_1_mid1_fu_312_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_5_2_mid2_v_v_fu_326_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_8_fu_339_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl_cast_fu_346_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_5_2_mid2_cast_fu_336_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_9_fu_359_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_13_fu_379_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_396_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl3_cast1_fu_403_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_mid2_cast1_fu_390_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl3_cast_fu_407_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_mid2_cast_fu_393_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_4_fu_429_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_9_cast8_fu_426_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_5_fu_417_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_cast_fu_423_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_8_0_2_fu_445_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_16_fu_455_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_2_fu_468_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl1_cast_fu_475_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_5_1_mid2_cast9_fu_465_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_7_fu_479_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_11_fu_490_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_14_fu_504_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp7_fu_566_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp5_fu_583_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_fu_596_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component conv2D_conv2D_mul_32s_32s_32_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    conv2D_mul_32s_32s_32_4_1_U1 : component conv2D_conv2D_mul_32s_32s_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_reg,
        din0 => input_load_6_reg_762,
        din1 => kernel_load_6_reg_720,
        ce => ap_const_logic_1,
        dout => grp_fu_518_p2);

    conv2D_mul_32s_32s_32_4_1_U2 : component conv2D_conv2D_mul_32s_32s_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_reg,
        din0 => input_load_7_reg_767,
        din1 => kernel_load_7_reg_725,
        ce => ap_const_logic_1,
        dout => grp_fu_522_p2);

    conv2D_mul_32s_32s_32_4_1_U3 : component conv2D_conv2D_mul_32s_32s_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_reg,
        din0 => input_load_reg_782,
        din1 => kernel_load_reg_746,
        ce => ap_const_logic_1,
        dout => grp_fu_530_p2);

    conv2D_mul_32s_32s_32_4_1_U4 : component conv2D_conv2D_mul_32s_32s_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_reg,
        din0 => input_load_8_reg_817,
        din1 => kernel_load_8_reg_772,
        ce => ap_const_logic_1,
        dout => grp_fu_538_p2);

    conv2D_mul_32s_32s_32_4_1_U5 : component conv2D_conv2D_mul_32s_32s_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_reg,
        din0 => input_load_1_reg_832,
        din1 => kernel_load_1_reg_797,
        ce => ap_const_logic_1,
        dout => grp_fu_542_p2);

    conv2D_mul_32s_32s_32_4_1_U6 : component conv2D_conv2D_mul_32s_32s_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_reg,
        din0 => input_load_2_reg_837,
        din1 => kernel_load_2_reg_812,
        ce => ap_const_logic_1,
        dout => grp_fu_550_p2);

    conv2D_mul_32s_32s_32_4_1_U7 : component conv2D_conv2D_mul_32s_32s_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_reg,
        din0 => input_load_3_reg_857,
        din1 => kernel_load_3_reg_842,
        ce => ap_const_logic_1,
        dout => grp_fu_554_p2);

    conv2D_mul_32s_32s_32_4_1_U8 : component conv2D_conv2D_mul_32s_32s_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_reg,
        din0 => input_load_4_reg_862,
        din1 => kernel_load_4_reg_847,
        ce => ap_const_logic_1,
        dout => grp_fu_558_p2);

    conv2D_mul_32s_32s_32_4_1_U9 : component conv2D_conv2D_mul_32s_32s_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_reg,
        din0 => input_load_5_reg_872,
        din1 => kernel_load_5_reg_867,
        ce => ap_const_logic_1,
        dout => grp_fu_562_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_reg = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_reg = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_reg = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_reg = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_rst_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_rst_reg <= ap_rst_reg_1;
        end if;
    end process;

    ap_rst_reg_1_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_rst_reg_1 <= ap_rst_reg_2;
        end if;
    end process;

    ap_rst_reg_2_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_rst_reg_2 <= ap_rst;
        end if;
    end process;

    i_reg_250_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten_reg_651 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                i_reg_250 <= tmp_mid2_reg_668;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_250 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_239_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten_reg_651 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                indvar_flatten_reg_239 <= indvar_flatten_next_reg_655;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten_reg_239 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    j_reg_261_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten_reg_651 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                j_reg_261 <= j_1_reg_704;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                j_reg_261 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                exitcond_flatten_reg_651 <= exitcond_flatten_fu_278_p2;
                exitcond_flatten_reg_651_pp0_iter1_reg <= exitcond_flatten_reg_651;
                exitcond_flatten_reg_651_pp0_iter2_reg <= exitcond_flatten_reg_651_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                indvar_flatten_next_reg_655 <= indvar_flatten_next_fu_284_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_651 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                input_load_1_reg_832 <= input_r_q1;
                input_load_2_reg_837 <= input_r_q0;
                kernel_load_3_reg_842 <= kernel_q0;
                kernel_load_4_reg_847 <= kernel_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten_reg_651 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then
                input_load_3_reg_857 <= input_r_q1;
                input_load_4_reg_862 <= input_r_q0;
                kernel_load_5_reg_867 <= kernel_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_651_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                input_load_5_reg_872 <= input_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_651 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                input_load_6_reg_762 <= input_r_q0;
                input_load_7_reg_767 <= input_r_q1;
                kernel_load_8_reg_772 <= kernel_q1;
                kernel_load_reg_746 <= kernel_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_651 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                input_load_8_reg_817 <= input_r_q0;
                input_load_reg_782 <= input_r_q1;
                kernel_load_1_reg_797 <= kernel_q0;
                kernel_load_2_reg_812 <= kernel_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_651 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                j_1_reg_704 <= j_1_fu_370_p2;
                kernel_load_6_reg_720 <= kernel_q0;
                kernel_load_7_reg_725 <= kernel_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten_fu_278_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                j_mid2_reg_660 <= j_mid2_fu_296_p3;
                tmp_5_1_mid2_reg_676 <= tmp_5_1_mid2_fu_318_p3;
                tmp_5_2_mid2_v_reg_682 <= tmp_5_2_mid2_v_fu_330_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_651_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                tmp2_reg_922 <= tmp2_fu_575_p2;
                tmp_1_1_1_reg_917 <= grp_fu_558_p2;
                tmp_1_1_reg_912 <= grp_fu_554_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_651_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp3_reg_932 <= tmp3_fu_579_p2;
                tmp_1_1_2_reg_927 <= grp_fu_562_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_651_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                tmp4_reg_937 <= tmp4_fu_587_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_651_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                tmp6_reg_907 <= tmp6_fu_570_p2;
                tmp_1_0_1_reg_897 <= grp_fu_542_p2;
                tmp_1_0_2_reg_902 <= grp_fu_550_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_651 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                tmp_10_reg_741 <= tmp_10_fu_439_p2;
                tmp_3_reg_730 <= tmp_3_fu_411_p2;
                    tmp_9_0_2_cast_reg_751(2 downto 0) <= tmp_9_0_2_cast_fu_451_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                tmp_10_reg_741_pp0_iter1_reg <= tmp_10_reg_741;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_651 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                tmp_12_reg_792 <= tmp_12_fu_499_p2;
                tmp_15_reg_807 <= tmp_15_fu_513_p2;
                tmp_6_reg_777 <= tmp_6_fu_485_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_651_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                tmp_1_2_1_reg_882 <= grp_fu_522_p2;
                tmp_1_2_reg_877 <= grp_fu_518_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_651_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                tmp_1_2_2_reg_892 <= grp_fu_538_p2;
                tmp_1_reg_887 <= grp_fu_530_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_651 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                    tmp_9_0_1_cast_reg_709(1 downto 0) <= tmp_9_0_1_cast_fu_375_p1(1 downto 0);
                    tmp_9_cast_reg_693(1 downto 0) <= tmp_9_cast_fu_356_p1(1 downto 0);
                tmp_s_reg_688 <= tmp_s_fu_350_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten_fu_278_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                tmp_mid2_reg_668 <= tmp_mid2_fu_304_p3;
            end if;
        end if;
    end process;
    tmp_9_cast_reg_693(5 downto 2) <= "0000";
    tmp_9_0_1_cast_reg_709(5 downto 2) <= "0000";
    tmp_9_0_2_cast_reg_751(5 downto 3) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, exitcond_flatten_fu_278_p2, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, ap_block_pp0_stage4_subdone, ap_block_pp0_stage2_subdone, ap_enable_reg_pp0_iter2, ap_block_pp0_stage1_subdone, ap_block_pp0_stage3_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((exitcond_flatten_fu_278_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((exitcond_flatten_fu_278_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(5);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state15 <= ap_CS_fsm(6);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage4_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage2_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(exitcond_flatten_fu_278_p2)
    begin
        if ((exitcond_flatten_fu_278_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_phi_fu_254_p4_assign_proc : process(i_reg_250, exitcond_flatten_reg_651, ap_CS_fsm_pp0_stage0, tmp_mid2_reg_668, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((exitcond_flatten_reg_651 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_i_phi_fu_254_p4 <= tmp_mid2_reg_668;
        else 
            ap_phi_mux_i_phi_fu_254_p4 <= i_reg_250;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_243_p4_assign_proc : process(indvar_flatten_reg_239, exitcond_flatten_reg_651, ap_CS_fsm_pp0_stage0, indvar_flatten_next_reg_655, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((exitcond_flatten_reg_651 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_indvar_flatten_phi_fu_243_p4 <= indvar_flatten_next_reg_655;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_243_p4 <= indvar_flatten_reg_239;
        end if; 
    end process;


    ap_phi_mux_j_phi_fu_265_p4_assign_proc : process(j_reg_261, exitcond_flatten_reg_651, ap_CS_fsm_pp0_stage0, j_1_reg_704, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((exitcond_flatten_reg_651 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_j_phi_fu_265_p4 <= j_1_reg_704;
        else 
            ap_phi_mux_j_phi_fu_265_p4 <= j_reg_261;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_flatten_fu_278_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_243_p4 = ap_const_lv4_9) else "0";
    exitcond_fu_290_p2 <= "1" when (ap_phi_mux_j_phi_fu_265_p4 = ap_const_lv2_3) else "0";
    i_1_fu_272_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_phi_fu_254_p4) + unsigned(ap_const_lv2_1));
    i_1_mid1_fu_312_p2 <= (ap_phi_mux_i_phi_fu_254_p4 xor ap_const_lv2_2);
    indvar_flatten_next_fu_284_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten_phi_fu_243_p4) + unsigned(ap_const_lv4_1));

    input_r_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, tmp_13_cast_fu_365_p1, ap_block_pp0_stage1, ap_block_pp0_stage2, tmp_20_cast_fu_460_p1, ap_block_pp0_stage3, tmp_18_cast_fu_508_p1, ap_block_pp0_stage4, tmp_16_cast_fu_534_p1, tmp_19_cast_fu_546_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            input_r_address0 <= tmp_19_cast_fu_546_p1(5 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            input_r_address0 <= tmp_16_cast_fu_534_p1(5 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            input_r_address0 <= tmp_18_cast_fu_508_p1(5 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            input_r_address0 <= tmp_20_cast_fu_460_p1(5 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            input_r_address0 <= tmp_13_cast_fu_365_p1(5 - 1 downto 0);
        else 
            input_r_address0 <= "XXXXX";
        end if; 
    end process;


    input_r_address1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage1, tmp_17_cast_fu_385_p1, tmp_11_cast_fu_434_p1, ap_block_pp0_stage2, tmp_15_cast_fu_494_p1, ap_block_pp0_stage3, tmp_12_cast_fu_526_p1, ap_block_pp0_stage4)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                input_r_address1 <= tmp_12_cast_fu_526_p1(5 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                input_r_address1 <= tmp_15_cast_fu_494_p1(5 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                input_r_address1 <= tmp_11_cast_fu_434_p1(5 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                input_r_address1 <= tmp_17_cast_fu_385_p1(5 - 1 downto 0);
            else 
                input_r_address1 <= "XXXXX";
            end if;
        else 
            input_r_address1 <= "XXXXX";
        end if; 
    end process;


    input_r_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_r_ce1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            input_r_ce1 <= ap_const_logic_1;
        else 
            input_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    j_1_fu_370_p2 <= std_logic_vector(unsigned(j_mid2_reg_660) + unsigned(ap_const_lv2_1));
    j_cast_fu_423_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_mid2_reg_660),3));
    j_mid2_fu_296_p3 <= 
        ap_const_lv2_0 when (exitcond_fu_290_p2(0) = '1') else 
        ap_phi_mux_j_phi_fu_265_p4;

    kernel_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                kernel_address0 <= ap_const_lv64_5(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                kernel_address0 <= ap_const_lv64_3(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                kernel_address0 <= ap_const_lv64_1(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                kernel_address0 <= ap_const_lv64_0(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                kernel_address0 <= ap_const_lv64_6(4 - 1 downto 0);
            else 
                kernel_address0 <= "XXXX";
            end if;
        else 
            kernel_address0 <= "XXXX";
        end if; 
    end process;


    kernel_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                kernel_address1 <= ap_const_lv64_4(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                kernel_address1 <= ap_const_lv64_2(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                kernel_address1 <= ap_const_lv64_8(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                kernel_address1 <= ap_const_lv64_7(4 - 1 downto 0);
            else 
                kernel_address1 <= "XXXX";
            end if;
        else 
            kernel_address1 <= "XXXX";
        end if; 
    end process;


    kernel_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            kernel_ce0 <= ap_const_logic_1;
        else 
            kernel_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    kernel_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            kernel_ce1 <= ap_const_logic_1;
        else 
            kernel_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_address0 <= tmp_14_cast_fu_592_p1(4 - 1 downto 0);

    output_r_ce0_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= std_logic_vector(unsigned(tmp4_reg_937) + unsigned(tmp1_fu_596_p2));

    output_r_we0_assign_proc : process(exitcond_flatten_reg_651_pp0_iter2_reg, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((exitcond_flatten_reg_651_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl1_cast_fu_475_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_468_p3),6));
    p_shl3_cast1_fu_403_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_396_p3),6));
    p_shl3_cast_fu_407_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_396_p3),5));
    p_shl_cast_fu_346_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_339_p3),6));
    tmp1_fu_596_p2 <= std_logic_vector(unsigned(tmp3_reg_932) + unsigned(tmp2_reg_922));
    tmp2_fu_575_p2 <= std_logic_vector(unsigned(tmp_1_reg_887) + unsigned(tmp_1_0_1_reg_897));
    tmp3_fu_579_p2 <= std_logic_vector(unsigned(tmp_1_0_2_reg_902) + unsigned(tmp_1_1_reg_912));
    tmp4_fu_587_p2 <= std_logic_vector(unsigned(tmp6_reg_907) + unsigned(tmp5_fu_583_p2));
    tmp5_fu_583_p2 <= std_logic_vector(unsigned(tmp_1_1_1_reg_917) + unsigned(tmp_1_1_2_reg_927));
    tmp6_fu_570_p2 <= std_logic_vector(unsigned(tmp7_fu_566_p2) + unsigned(tmp_1_2_reg_877));
    tmp7_fu_566_p2 <= std_logic_vector(unsigned(tmp_1_2_1_reg_882) + unsigned(tmp_1_2_2_reg_892));
    tmp_10_fu_439_p2 <= std_logic_vector(unsigned(tmp_9_cast8_fu_426_p1) + unsigned(tmp_5_fu_417_p2));
    tmp_11_cast_fu_434_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_429_p2),64));
    tmp_11_fu_490_p2 <= std_logic_vector(unsigned(tmp_9_0_1_cast_reg_709) + unsigned(tmp_3_reg_730));
    tmp_12_cast_fu_526_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_reg_777),64));
    tmp_12_fu_499_p2 <= std_logic_vector(unsigned(tmp_9_0_1_cast_reg_709) + unsigned(tmp_7_fu_479_p2));
    tmp_13_cast_fu_365_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_359_p2),64));
    tmp_13_fu_379_p2 <= std_logic_vector(unsigned(tmp_9_0_1_cast_fu_375_p1) + unsigned(tmp_s_fu_350_p2));
    tmp_14_cast_fu_592_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_reg_741_pp0_iter1_reg),64));
    tmp_14_fu_504_p2 <= std_logic_vector(unsigned(tmp_9_0_2_cast_reg_751) + unsigned(tmp_3_reg_730));
    tmp_15_cast_fu_494_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_fu_490_p2),64));
    tmp_15_fu_513_p2 <= std_logic_vector(unsigned(tmp_9_0_2_cast_reg_751) + unsigned(tmp_7_fu_479_p2));
    tmp_16_cast_fu_534_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_reg_792),64));
    tmp_16_fu_455_p2 <= std_logic_vector(unsigned(tmp_9_0_2_cast_fu_451_p1) + unsigned(tmp_s_reg_688));
    tmp_17_cast_fu_385_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_fu_379_p2),64));
    tmp_18_cast_fu_508_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_fu_504_p2),64));
    tmp_19_cast_fu_546_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_reg_807),64));
    tmp_20_cast_fu_460_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_16_fu_455_p2),64));
    tmp_2_fu_468_p3 <= (tmp_5_1_mid2_reg_676 & ap_const_lv2_0);
    tmp_3_fu_411_p2 <= std_logic_vector(unsigned(p_shl3_cast1_fu_403_p1) + unsigned(tmp_mid2_cast1_fu_390_p1));
    tmp_4_fu_429_p2 <= std_logic_vector(unsigned(tmp_9_cast_reg_693) + unsigned(tmp_3_fu_411_p2));
    tmp_5_1_mid2_cast9_fu_465_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_1_mid2_reg_676),6));
    tmp_5_1_mid2_fu_318_p3 <= 
        i_1_mid1_fu_312_p2 when (exitcond_fu_290_p2(0) = '1') else 
        i_1_fu_272_p2;
    tmp_5_2_mid2_cast_fu_336_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_2_mid2_v_reg_682),6));
    tmp_5_2_mid2_v_fu_330_p2 <= std_logic_vector(unsigned(tmp_5_2_mid2_v_v_fu_326_p1) + unsigned(ap_const_lv3_2));
    tmp_5_2_mid2_v_v_fu_326_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_mid2_fu_304_p3),3));
    tmp_5_fu_417_p2 <= std_logic_vector(unsigned(p_shl3_cast_fu_407_p1) - unsigned(tmp_mid2_cast_fu_393_p1));
    tmp_6_fu_485_p2 <= std_logic_vector(unsigned(tmp_9_cast_reg_693) + unsigned(tmp_7_fu_479_p2));
    tmp_7_fu_479_p2 <= std_logic_vector(unsigned(p_shl1_cast_fu_475_p1) + unsigned(tmp_5_1_mid2_cast9_fu_465_p1));
    tmp_8_0_2_fu_445_p2 <= std_logic_vector(unsigned(j_cast_fu_423_p1) + unsigned(ap_const_lv3_2));
    tmp_8_fu_339_p3 <= (tmp_5_2_mid2_v_reg_682 & ap_const_lv2_0);
    tmp_9_0_1_cast_fu_375_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_1_fu_370_p2),6));
    tmp_9_0_2_cast_fu_451_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_0_2_fu_445_p2),6));
    tmp_9_cast8_fu_426_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_mid2_reg_660),5));
    tmp_9_cast_fu_356_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_mid2_reg_660),6));
    tmp_9_fu_359_p2 <= std_logic_vector(unsigned(tmp_9_cast_fu_356_p1) + unsigned(tmp_s_fu_350_p2));
    tmp_fu_396_p3 <= (tmp_mid2_reg_668 & ap_const_lv2_0);
    tmp_mid2_cast1_fu_390_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_mid2_reg_668),6));
    tmp_mid2_cast_fu_393_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_mid2_reg_668),5));
    tmp_mid2_fu_304_p3 <= 
        i_1_fu_272_p2 when (exitcond_fu_290_p2(0) = '1') else 
        ap_phi_mux_i_phi_fu_254_p4;
    tmp_s_fu_350_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_346_p1) + unsigned(tmp_5_2_mid2_cast_fu_336_p1));
end behav;
