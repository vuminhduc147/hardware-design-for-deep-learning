// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="conv2D_conv2D,hls_ip_2018_3,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.693000,HLS_SYN_LAT=54,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=36,HLS_SYN_FF=3219,HLS_SYN_LUT=1296,HLS_VERSION=2018_3}" *)

module conv2D_conv2D (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        input_r_address1,
        input_r_ce1,
        input_r_q1,
        kernel_address0,
        kernel_ce0,
        kernel_q0,
        kernel_address1,
        kernel_ce1,
        kernel_q1,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_pp0_stage0 = 7'd2;
parameter    ap_ST_fsm_pp0_stage1 = 7'd4;
parameter    ap_ST_fsm_pp0_stage2 = 7'd8;
parameter    ap_ST_fsm_pp0_stage3 = 7'd16;
parameter    ap_ST_fsm_pp0_stage4 = 7'd32;
parameter    ap_ST_fsm_state15 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] input_r_address0;
output   input_r_ce0;
input  [31:0] input_r_q0;
output  [4:0] input_r_address1;
output   input_r_ce1;
input  [31:0] input_r_q1;
output  [3:0] kernel_address0;
output   kernel_ce0;
input  [31:0] kernel_q0;
output  [3:0] kernel_address1;
output   kernel_ce1;
input  [31:0] kernel_q1;
output  [3:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [31:0] output_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[4:0] input_r_address0;
reg input_r_ce0;
reg[4:0] input_r_address1;
reg input_r_ce1;
reg[3:0] kernel_address0;
reg kernel_ce0;
reg[3:0] kernel_address1;
reg kernel_ce1;
reg output_r_ce0;
reg output_r_we0;

(* shreg_extract = "no" *) reg    ap_rst_reg_2;
(* shreg_extract = "no" *) reg    ap_rst_reg_1;
(* shreg_extract = "no" *) reg    ap_rst_reg;
(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [3:0] indvar_flatten_reg_239;
reg   [1:0] i_reg_250;
reg   [1:0] j_reg_261;
wire   [0:0] exitcond_flatten_fu_278_p2;
reg   [0:0] exitcond_flatten_reg_651;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state7_pp0_stage0_iter1;
wire    ap_block_state12_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] exitcond_flatten_reg_651_pp0_iter1_reg;
reg   [0:0] exitcond_flatten_reg_651_pp0_iter2_reg;
wire   [3:0] indvar_flatten_next_fu_284_p2;
reg   [3:0] indvar_flatten_next_reg_655;
reg    ap_enable_reg_pp0_iter0;
wire   [1:0] j_mid2_fu_296_p3;
reg   [1:0] j_mid2_reg_660;
wire   [1:0] tmp_mid2_fu_304_p3;
reg   [1:0] tmp_mid2_reg_668;
wire   [1:0] tmp_5_1_mid2_fu_318_p3;
reg   [1:0] tmp_5_1_mid2_reg_676;
wire   [2:0] tmp_5_2_mid2_v_fu_330_p2;
reg   [2:0] tmp_5_2_mid2_v_reg_682;
wire   [5:0] tmp_s_fu_350_p2;
reg   [5:0] tmp_s_reg_688;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_state8_pp0_stage1_iter1;
wire    ap_block_state13_pp0_stage1_iter2;
wire    ap_block_pp0_stage1_11001;
wire   [5:0] tmp_9_cast_fu_356_p1;
reg   [5:0] tmp_9_cast_reg_693;
wire   [1:0] j_1_fu_370_p2;
reg   [1:0] j_1_reg_704;
wire   [5:0] tmp_9_0_1_cast_fu_375_p1;
reg   [5:0] tmp_9_0_1_cast_reg_709;
reg  signed [31:0] kernel_load_6_reg_720;
reg  signed [31:0] kernel_load_7_reg_725;
wire   [5:0] tmp_3_fu_411_p2;
reg   [5:0] tmp_3_reg_730;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state4_pp0_stage2_iter0;
wire    ap_block_state9_pp0_stage2_iter1;
wire    ap_block_state14_pp0_stage2_iter2;
wire    ap_block_pp0_stage2_11001;
wire   [4:0] tmp_10_fu_439_p2;
reg   [4:0] tmp_10_reg_741;
reg   [4:0] tmp_10_reg_741_pp0_iter1_reg;
reg  signed [31:0] kernel_load_reg_746;
wire   [5:0] tmp_9_0_2_cast_fu_451_p1;
reg   [5:0] tmp_9_0_2_cast_reg_751;
reg  signed [31:0] input_load_6_reg_762;
reg  signed [31:0] input_load_7_reg_767;
reg  signed [31:0] kernel_load_8_reg_772;
wire   [5:0] tmp_6_fu_485_p2;
reg   [5:0] tmp_6_reg_777;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state5_pp0_stage3_iter0;
wire    ap_block_state10_pp0_stage3_iter1;
wire    ap_block_pp0_stage3_11001;
reg  signed [31:0] input_load_reg_782;
wire   [5:0] tmp_12_fu_499_p2;
reg   [5:0] tmp_12_reg_792;
reg  signed [31:0] kernel_load_1_reg_797;
wire   [5:0] tmp_15_fu_513_p2;
reg   [5:0] tmp_15_reg_807;
reg  signed [31:0] kernel_load_2_reg_812;
reg  signed [31:0] input_load_8_reg_817;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state6_pp0_stage4_iter0;
wire    ap_block_state11_pp0_stage4_iter1;
wire    ap_block_pp0_stage4_11001;
reg  signed [31:0] input_load_1_reg_832;
reg  signed [31:0] input_load_2_reg_837;
reg  signed [31:0] kernel_load_3_reg_842;
reg  signed [31:0] kernel_load_4_reg_847;
reg  signed [31:0] input_load_3_reg_857;
reg    ap_enable_reg_pp0_iter1;
reg  signed [31:0] input_load_4_reg_862;
reg  signed [31:0] kernel_load_5_reg_867;
reg  signed [31:0] input_load_5_reg_872;
wire   [31:0] grp_fu_518_p2;
reg   [31:0] tmp_1_2_reg_877;
wire   [31:0] grp_fu_522_p2;
reg   [31:0] tmp_1_2_1_reg_882;
wire   [31:0] grp_fu_530_p2;
reg   [31:0] tmp_1_reg_887;
wire   [31:0] grp_fu_538_p2;
reg   [31:0] tmp_1_2_2_reg_892;
wire   [31:0] grp_fu_542_p2;
reg   [31:0] tmp_1_0_1_reg_897;
wire   [31:0] grp_fu_550_p2;
reg   [31:0] tmp_1_0_2_reg_902;
wire   [31:0] tmp6_fu_570_p2;
reg   [31:0] tmp6_reg_907;
wire   [31:0] grp_fu_554_p2;
reg   [31:0] tmp_1_1_reg_912;
wire   [31:0] grp_fu_558_p2;
reg   [31:0] tmp_1_1_1_reg_917;
wire   [31:0] tmp2_fu_575_p2;
reg   [31:0] tmp2_reg_922;
wire   [31:0] grp_fu_562_p2;
reg   [31:0] tmp_1_1_2_reg_927;
wire   [31:0] tmp3_fu_579_p2;
reg   [31:0] tmp3_reg_932;
wire   [31:0] tmp4_fu_587_p2;
reg   [31:0] tmp4_reg_937;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
wire    ap_block_pp0_stage4_subdone;
wire    ap_block_pp0_stage2_subdone;
reg    ap_enable_reg_pp0_iter2;
reg   [3:0] ap_phi_mux_indvar_flatten_phi_fu_243_p4;
wire    ap_block_pp0_stage0;
reg   [1:0] ap_phi_mux_i_phi_fu_254_p4;
reg   [1:0] ap_phi_mux_j_phi_fu_265_p4;
wire   [63:0] tmp_13_cast_fu_365_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] tmp_17_cast_fu_385_p1;
wire   [63:0] tmp_11_cast_fu_434_p1;
wire    ap_block_pp0_stage2;
wire   [63:0] tmp_20_cast_fu_460_p1;
wire   [63:0] tmp_15_cast_fu_494_p1;
wire    ap_block_pp0_stage3;
wire   [63:0] tmp_18_cast_fu_508_p1;
wire   [63:0] tmp_12_cast_fu_526_p1;
wire    ap_block_pp0_stage4;
wire   [63:0] tmp_16_cast_fu_534_p1;
wire   [63:0] tmp_19_cast_fu_546_p1;
wire   [63:0] tmp_14_cast_fu_592_p1;
wire   [0:0] exitcond_fu_290_p2;
wire   [1:0] i_1_fu_272_p2;
wire   [1:0] i_1_mid1_fu_312_p2;
wire   [2:0] tmp_5_2_mid2_v_v_fu_326_p1;
wire   [4:0] tmp_8_fu_339_p3;
wire   [5:0] p_shl_cast_fu_346_p1;
wire   [5:0] tmp_5_2_mid2_cast_fu_336_p1;
wire   [5:0] tmp_9_fu_359_p2;
wire   [5:0] tmp_13_fu_379_p2;
wire   [3:0] tmp_fu_396_p3;
wire   [5:0] p_shl3_cast1_fu_403_p1;
wire   [5:0] tmp_mid2_cast1_fu_390_p1;
wire   [4:0] p_shl3_cast_fu_407_p1;
wire   [4:0] tmp_mid2_cast_fu_393_p1;
wire   [5:0] tmp_4_fu_429_p2;
wire   [4:0] tmp_9_cast8_fu_426_p1;
wire   [4:0] tmp_5_fu_417_p2;
wire   [2:0] j_cast_fu_423_p1;
wire   [2:0] tmp_8_0_2_fu_445_p2;
wire   [5:0] tmp_16_fu_455_p2;
wire   [3:0] tmp_2_fu_468_p3;
wire   [5:0] p_shl1_cast_fu_475_p1;
wire   [5:0] tmp_5_1_mid2_cast9_fu_465_p1;
wire   [5:0] tmp_7_fu_479_p2;
wire   [5:0] tmp_11_fu_490_p2;
wire   [5:0] tmp_14_fu_504_p2;
wire   [31:0] tmp7_fu_566_p2;
wire   [31:0] tmp5_fu_583_p2;
wire   [31:0] tmp1_fu_596_p2;
wire    ap_CS_fsm_state15;
reg   [6:0] ap_NS_fsm;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage3_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_rst_reg_2 = 1'b1;
#0 ap_rst_reg_1 = 1'b1;
#0 ap_rst_reg = 1'b1;
#0 ap_CS_fsm = 7'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

conv2D_conv2D_mul_32s_32s_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv2D_mul_32s_32s_32_4_1_U1(
    .clk(ap_clk),
    .reset(ap_rst_reg),
    .din0(input_load_6_reg_762),
    .din1(kernel_load_6_reg_720),
    .ce(1'b1),
    .dout(grp_fu_518_p2)
);

conv2D_conv2D_mul_32s_32s_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv2D_mul_32s_32s_32_4_1_U2(
    .clk(ap_clk),
    .reset(ap_rst_reg),
    .din0(input_load_7_reg_767),
    .din1(kernel_load_7_reg_725),
    .ce(1'b1),
    .dout(grp_fu_522_p2)
);

conv2D_conv2D_mul_32s_32s_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv2D_mul_32s_32s_32_4_1_U3(
    .clk(ap_clk),
    .reset(ap_rst_reg),
    .din0(input_load_reg_782),
    .din1(kernel_load_reg_746),
    .ce(1'b1),
    .dout(grp_fu_530_p2)
);

conv2D_conv2D_mul_32s_32s_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv2D_mul_32s_32s_32_4_1_U4(
    .clk(ap_clk),
    .reset(ap_rst_reg),
    .din0(input_load_8_reg_817),
    .din1(kernel_load_8_reg_772),
    .ce(1'b1),
    .dout(grp_fu_538_p2)
);

conv2D_conv2D_mul_32s_32s_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv2D_mul_32s_32s_32_4_1_U5(
    .clk(ap_clk),
    .reset(ap_rst_reg),
    .din0(input_load_1_reg_832),
    .din1(kernel_load_1_reg_797),
    .ce(1'b1),
    .dout(grp_fu_542_p2)
);

conv2D_conv2D_mul_32s_32s_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv2D_mul_32s_32s_32_4_1_U6(
    .clk(ap_clk),
    .reset(ap_rst_reg),
    .din0(input_load_2_reg_837),
    .din1(kernel_load_2_reg_812),
    .ce(1'b1),
    .dout(grp_fu_550_p2)
);

conv2D_conv2D_mul_32s_32s_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv2D_mul_32s_32s_32_4_1_U7(
    .clk(ap_clk),
    .reset(ap_rst_reg),
    .din0(input_load_3_reg_857),
    .din1(kernel_load_3_reg_842),
    .ce(1'b1),
    .dout(grp_fu_554_p2)
);

conv2D_conv2D_mul_32s_32s_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv2D_mul_32s_32s_32_4_1_U8(
    .clk(ap_clk),
    .reset(ap_rst_reg),
    .din0(input_load_4_reg_862),
    .din1(kernel_load_4_reg_847),
    .ce(1'b1),
    .dout(grp_fu_558_p2)
);

conv2D_conv2D_mul_32s_32s_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv2D_mul_32s_32s_32_4_1_U9(
    .clk(ap_clk),
    .reset(ap_rst_reg),
    .din0(input_load_5_reg_872),
    .din1(kernel_load_5_reg_867),
    .ce(1'b1),
    .dout(grp_fu_562_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_reg == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_reg == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_reg == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_reg == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    ap_rst_reg <= ap_rst_reg_1;
end

always @ (posedge ap_clk) begin
    ap_rst_reg_1 <= ap_rst_reg_2;
end

always @ (posedge ap_clk) begin
    ap_rst_reg_2 <= ap_rst;
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_reg_651 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        i_reg_250 <= tmp_mid2_reg_668;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_250 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_reg_651 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        indvar_flatten_reg_239 <= indvar_flatten_next_reg_655;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten_reg_239 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_reg_651 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        j_reg_261 <= j_1_reg_704;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        j_reg_261 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exitcond_flatten_reg_651 <= exitcond_flatten_fu_278_p2;
        exitcond_flatten_reg_651_pp0_iter1_reg <= exitcond_flatten_reg_651;
        exitcond_flatten_reg_651_pp0_iter2_reg <= exitcond_flatten_reg_651_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        indvar_flatten_next_reg_655 <= indvar_flatten_next_fu_284_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_651 == 1'd0) & (1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        input_load_1_reg_832 <= input_r_q1;
        input_load_2_reg_837 <= input_r_q0;
        kernel_load_3_reg_842 <= kernel_q0;
        kernel_load_4_reg_847 <= kernel_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_reg_651 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        input_load_3_reg_857 <= input_r_q1;
        input_load_4_reg_862 <= input_r_q0;
        kernel_load_5_reg_867 <= kernel_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_651_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        input_load_5_reg_872 <= input_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_651 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        input_load_6_reg_762 <= input_r_q0;
        input_load_7_reg_767 <= input_r_q1;
        kernel_load_8_reg_772 <= kernel_q1;
        kernel_load_reg_746 <= kernel_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_651 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        input_load_8_reg_817 <= input_r_q0;
        input_load_reg_782 <= input_r_q1;
        kernel_load_1_reg_797 <= kernel_q0;
        kernel_load_2_reg_812 <= kernel_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_651 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        j_1_reg_704 <= j_1_fu_370_p2;
        kernel_load_6_reg_720 <= kernel_q0;
        kernel_load_7_reg_725 <= kernel_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_fu_278_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        j_mid2_reg_660 <= j_mid2_fu_296_p3;
        tmp_5_1_mid2_reg_676 <= tmp_5_1_mid2_fu_318_p3;
        tmp_5_2_mid2_v_reg_682 <= tmp_5_2_mid2_v_fu_330_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_651_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        tmp2_reg_922 <= tmp2_fu_575_p2;
        tmp_1_1_1_reg_917 <= grp_fu_558_p2;
        tmp_1_1_reg_912 <= grp_fu_554_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_651_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp3_reg_932 <= tmp3_fu_579_p2;
        tmp_1_1_2_reg_927 <= grp_fu_562_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_651_pp0_iter2_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        tmp4_reg_937 <= tmp4_fu_587_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_651_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        tmp6_reg_907 <= tmp6_fu_570_p2;
        tmp_1_0_1_reg_897 <= grp_fu_542_p2;
        tmp_1_0_2_reg_902 <= grp_fu_550_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_651 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        tmp_10_reg_741 <= tmp_10_fu_439_p2;
        tmp_3_reg_730 <= tmp_3_fu_411_p2;
        tmp_9_0_2_cast_reg_751[2 : 0] <= tmp_9_0_2_cast_fu_451_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        tmp_10_reg_741_pp0_iter1_reg <= tmp_10_reg_741;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_651 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        tmp_12_reg_792 <= tmp_12_fu_499_p2;
        tmp_15_reg_807 <= tmp_15_fu_513_p2;
        tmp_6_reg_777 <= tmp_6_fu_485_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_651_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        tmp_1_2_1_reg_882 <= grp_fu_522_p2;
        tmp_1_2_reg_877 <= grp_fu_518_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_651_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        tmp_1_2_2_reg_892 <= grp_fu_538_p2;
        tmp_1_reg_887 <= grp_fu_530_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_651 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        tmp_9_0_1_cast_reg_709[1 : 0] <= tmp_9_0_1_cast_fu_375_p1[1 : 0];
        tmp_9_cast_reg_693[1 : 0] <= tmp_9_cast_fu_356_p1[1 : 0];
        tmp_s_reg_688 <= tmp_s_fu_350_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_fu_278_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        tmp_mid2_reg_668 <= tmp_mid2_fu_304_p3;
    end
end

always @ (*) begin
    if ((exitcond_flatten_fu_278_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_651 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_i_phi_fu_254_p4 = tmp_mid2_reg_668;
    end else begin
        ap_phi_mux_i_phi_fu_254_p4 = i_reg_250;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_651 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_indvar_flatten_phi_fu_243_p4 = indvar_flatten_next_reg_655;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_243_p4 = indvar_flatten_reg_239;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_651 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_j_phi_fu_265_p4 = j_1_reg_704;
    end else begin
        ap_phi_mux_j_phi_fu_265_p4 = j_reg_261;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        input_r_address0 = tmp_19_cast_fu_546_p1;
    end else if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        input_r_address0 = tmp_16_cast_fu_534_p1;
    end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        input_r_address0 = tmp_18_cast_fu_508_p1;
    end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        input_r_address0 = tmp_20_cast_fu_460_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        input_r_address0 = tmp_13_cast_fu_365_p1;
    end else begin
        input_r_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            input_r_address1 = tmp_12_cast_fu_526_p1;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            input_r_address1 = tmp_15_cast_fu_494_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            input_r_address1 = tmp_11_cast_fu_434_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            input_r_address1 = tmp_17_cast_fu_385_p1;
        end else begin
            input_r_address1 = 'bx;
        end
    end else begin
        input_r_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        input_r_ce1 = 1'b1;
    end else begin
        input_r_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            kernel_address0 = 64'd5;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            kernel_address0 = 64'd3;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            kernel_address0 = 64'd1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            kernel_address0 = 64'd0;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            kernel_address0 = 64'd6;
        end else begin
            kernel_address0 = 'bx;
        end
    end else begin
        kernel_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            kernel_address1 = 64'd4;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            kernel_address1 = 64'd2;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            kernel_address1 = 64'd8;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            kernel_address1 = 64'd7;
        end else begin
            kernel_address1 = 'bx;
        end
    end else begin
        kernel_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        kernel_ce0 = 1'b1;
    end else begin
        kernel_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        kernel_ce1 = 1'b1;
    end else begin
        kernel_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_651_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((exitcond_flatten_fu_278_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((exitcond_flatten_fu_278_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((~((1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else if (((1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd6];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage4_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage2_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign exitcond_flatten_fu_278_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_243_p4 == 4'd9) ? 1'b1 : 1'b0);

assign exitcond_fu_290_p2 = ((ap_phi_mux_j_phi_fu_265_p4 == 2'd3) ? 1'b1 : 1'b0);

assign i_1_fu_272_p2 = (ap_phi_mux_i_phi_fu_254_p4 + 2'd1);

assign i_1_mid1_fu_312_p2 = (ap_phi_mux_i_phi_fu_254_p4 ^ 2'd2);

assign indvar_flatten_next_fu_284_p2 = (ap_phi_mux_indvar_flatten_phi_fu_243_p4 + 4'd1);

assign j_1_fu_370_p2 = (j_mid2_reg_660 + 2'd1);

assign j_cast_fu_423_p1 = j_mid2_reg_660;

assign j_mid2_fu_296_p3 = ((exitcond_fu_290_p2[0:0] === 1'b1) ? 2'd0 : ap_phi_mux_j_phi_fu_265_p4);

assign output_r_address0 = tmp_14_cast_fu_592_p1;

assign output_r_d0 = (tmp4_reg_937 + tmp1_fu_596_p2);

assign p_shl1_cast_fu_475_p1 = tmp_2_fu_468_p3;

assign p_shl3_cast1_fu_403_p1 = tmp_fu_396_p3;

assign p_shl3_cast_fu_407_p1 = tmp_fu_396_p3;

assign p_shl_cast_fu_346_p1 = tmp_8_fu_339_p3;

assign tmp1_fu_596_p2 = (tmp3_reg_932 + tmp2_reg_922);

assign tmp2_fu_575_p2 = (tmp_1_reg_887 + tmp_1_0_1_reg_897);

assign tmp3_fu_579_p2 = (tmp_1_0_2_reg_902 + tmp_1_1_reg_912);

assign tmp4_fu_587_p2 = (tmp6_reg_907 + tmp5_fu_583_p2);

assign tmp5_fu_583_p2 = (tmp_1_1_1_reg_917 + tmp_1_1_2_reg_927);

assign tmp6_fu_570_p2 = (tmp7_fu_566_p2 + tmp_1_2_reg_877);

assign tmp7_fu_566_p2 = (tmp_1_2_1_reg_882 + tmp_1_2_2_reg_892);

assign tmp_10_fu_439_p2 = (tmp_9_cast8_fu_426_p1 + tmp_5_fu_417_p2);

assign tmp_11_cast_fu_434_p1 = tmp_4_fu_429_p2;

assign tmp_11_fu_490_p2 = (tmp_9_0_1_cast_reg_709 + tmp_3_reg_730);

assign tmp_12_cast_fu_526_p1 = tmp_6_reg_777;

assign tmp_12_fu_499_p2 = (tmp_9_0_1_cast_reg_709 + tmp_7_fu_479_p2);

assign tmp_13_cast_fu_365_p1 = tmp_9_fu_359_p2;

assign tmp_13_fu_379_p2 = (tmp_9_0_1_cast_fu_375_p1 + tmp_s_fu_350_p2);

assign tmp_14_cast_fu_592_p1 = tmp_10_reg_741_pp0_iter1_reg;

assign tmp_14_fu_504_p2 = (tmp_9_0_2_cast_reg_751 + tmp_3_reg_730);

assign tmp_15_cast_fu_494_p1 = tmp_11_fu_490_p2;

assign tmp_15_fu_513_p2 = (tmp_9_0_2_cast_reg_751 + tmp_7_fu_479_p2);

assign tmp_16_cast_fu_534_p1 = tmp_12_reg_792;

assign tmp_16_fu_455_p2 = (tmp_9_0_2_cast_fu_451_p1 + tmp_s_reg_688);

assign tmp_17_cast_fu_385_p1 = tmp_13_fu_379_p2;

assign tmp_18_cast_fu_508_p1 = tmp_14_fu_504_p2;

assign tmp_19_cast_fu_546_p1 = tmp_15_reg_807;

assign tmp_20_cast_fu_460_p1 = tmp_16_fu_455_p2;

assign tmp_2_fu_468_p3 = {{tmp_5_1_mid2_reg_676}, {2'd0}};

assign tmp_3_fu_411_p2 = (p_shl3_cast1_fu_403_p1 + tmp_mid2_cast1_fu_390_p1);

assign tmp_4_fu_429_p2 = (tmp_9_cast_reg_693 + tmp_3_fu_411_p2);

assign tmp_5_1_mid2_cast9_fu_465_p1 = tmp_5_1_mid2_reg_676;

assign tmp_5_1_mid2_fu_318_p3 = ((exitcond_fu_290_p2[0:0] === 1'b1) ? i_1_mid1_fu_312_p2 : i_1_fu_272_p2);

assign tmp_5_2_mid2_cast_fu_336_p1 = tmp_5_2_mid2_v_reg_682;

assign tmp_5_2_mid2_v_fu_330_p2 = (tmp_5_2_mid2_v_v_fu_326_p1 + 3'd2);

assign tmp_5_2_mid2_v_v_fu_326_p1 = tmp_mid2_fu_304_p3;

assign tmp_5_fu_417_p2 = (p_shl3_cast_fu_407_p1 - tmp_mid2_cast_fu_393_p1);

assign tmp_6_fu_485_p2 = (tmp_9_cast_reg_693 + tmp_7_fu_479_p2);

assign tmp_7_fu_479_p2 = (p_shl1_cast_fu_475_p1 + tmp_5_1_mid2_cast9_fu_465_p1);

assign tmp_8_0_2_fu_445_p2 = (j_cast_fu_423_p1 + 3'd2);

assign tmp_8_fu_339_p3 = {{tmp_5_2_mid2_v_reg_682}, {2'd0}};

assign tmp_9_0_1_cast_fu_375_p1 = j_1_fu_370_p2;

assign tmp_9_0_2_cast_fu_451_p1 = tmp_8_0_2_fu_445_p2;

assign tmp_9_cast8_fu_426_p1 = j_mid2_reg_660;

assign tmp_9_cast_fu_356_p1 = j_mid2_reg_660;

assign tmp_9_fu_359_p2 = (tmp_9_cast_fu_356_p1 + tmp_s_fu_350_p2);

assign tmp_fu_396_p3 = {{tmp_mid2_reg_668}, {2'd0}};

assign tmp_mid2_cast1_fu_390_p1 = tmp_mid2_reg_668;

assign tmp_mid2_cast_fu_393_p1 = tmp_mid2_reg_668;

assign tmp_mid2_fu_304_p3 = ((exitcond_fu_290_p2[0:0] === 1'b1) ? i_1_fu_272_p2 : ap_phi_mux_i_phi_fu_254_p4);

assign tmp_s_fu_350_p2 = (p_shl_cast_fu_346_p1 + tmp_5_2_mid2_cast_fu_336_p1);

always @ (posedge ap_clk) begin
    tmp_9_cast_reg_693[5:2] <= 4'b0000;
    tmp_9_0_1_cast_reg_709[5:2] <= 4'b0000;
    tmp_9_0_2_cast_reg_751[5:3] <= 3'b000;
end

endmodule //conv2D_conv2D
